@startuml

participant "MochiKernel\n(ライブラリ)" as kernel
box "drv-ns16550"
    participant "入出力\n制御" as ioctrl
    participant "割込み管理"   as intmng
    participant "転送\n制御"   as txctrl
    participant "受信\n制御"   as rxctrl
end box

activate intmng
ref over intmng
    初期化
end ref

loop 割込み番号毎
    alt 割込み番号 == IRQ4
        ioctrl <- intmng: IIR読込み( COM1 )
        activate ioctrl
        note right: 割込み要因読込み
        ref over ioctrl
              入出力制御
            デバイス読込み
        end ref
        ioctrl --> intmng:
        deactivate ioctrl

        alt ( IIR & 0xE ) == 0x02 ※転送バッファ空
            kernel <- intmng: 割込み完了通知( IRQ4 )
            activate kernel
            kernel --> intmng:
            deactivate kernel

            intmng -> txctrl: 転送( COM1 )
            activate txctrl
            ref over txctrl
                転送制御
                  転送
            end ref
            intmng <-- txctrl:
            deactivate txctrl

        else ( ( IIR & 0xE ) == 0x04 ) || ※データ受信\n ( ( IIR & 0xE ) == 0x06 ) || ※エラー\n ( ( IIR & 0xE ) == 0x0C )    ※受信タイムアウト
            intmng -> rxctrl: 受信( COM1 )
            activate rxctrl
            ref over rxctrl
                受信制御
                  受信
            end ref
            intmng <-- rxctrl
            deactivate rxctrl

            kernel <- intmng: 割込み完了通知( IRQ4 )
            activate kernel
            kernel --> intmng:
            deactivate kernel

        else ( IIR & 0xE ) == 0x00
            kernel <- intmng: 割込み完了通知( IRQ4 )
            activate kernel
            kernel --> intmng:
            deactivate kernel

        end alt

    else 割込み番号 == IRQ3
        ioctrl <- intmng: IIR読込み( COM2 )
        activate ioctrl
        note right: 割込み要因読込み
        ref over ioctrl
              入出力制御
            デバイス読込み
        end ref
        ioctrl --> intmng:
        deactivate ioctrl

        alt ( IIR & 0xE ) == 0x02 ※転送バッファ空
            kernel <- intmng: 割込み完了通知( IRQ3 )
            activate kernel
            kernel --> intmng:
            deactivate kernel

            intmng -> txctrl: 転送( COM2 )
            activate txctrl
            ref over txctrl
                転送制御
                転送処理
            end ref
            intmng <-- txctrl:
            deactivate txctrl

        else ( ( IIR & 0xE ) == 0x04 ) || ※データ受信\n ( ( IIR & 0xE ) == 0x06 ) || ※エラー\n ( ( IIR & 0xE ) == 0x0C )    ※受信タイムアウト
            intmng -> rxctrl: 受信( COM2 )
            activate rxctrl
            ref over rxctrl
                受信制御
                受信処理
            end ref
            intmng <-- rxctrl
            deactivate rxctrl

            kernel <- intmng: 割込み完了通知( IRQ3 )
            activate kernel
            kernel --> intmng:
            deactivate kernel

        else ( IIR & 0xE ) == 0x00
            kernel <- intmng: 割込み完了通知( IRQ3 )
            activate kernel
            kernel --> intmng:
            deactivate kernel

        end alt
    end alt
end loop
deactivate intmng

@enduml
